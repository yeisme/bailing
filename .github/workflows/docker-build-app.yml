name: Build and Push App Docker Image

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - "docker/dockerfile.dev"
      - "pyproject.toml"
      - "uv.lock"
      - ".github/workflows/docker-build-builder.yml"
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - master
    paths-ignore:
      - "docker/dockerfile.dev"
      - "pyproject.toml"
      - "uv.lock"
      - ".github/workflows/docker-build-builder.yml"

env:
  REGISTRY: ghcr.io
  BUILDER_IMAGE_NAME: ${{ github.repository }}-builder
  APP_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-app:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest builder image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:latest || echo "Builder image not found, please build it first"

      - name: Extract metadata for app image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push App Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=app
          cache-to: type=gha,mode=max,scope=app
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILDER_IMAGE=${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:latest

      - name: Output image tags
        run: |
          echo "App image tags:"
          echo "${{ steps.meta.outputs.tags }}"
