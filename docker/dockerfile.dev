# ---- 第一阶段: Builder ----
# 使用包含构建工具的基础镜像
FROM ghcr.io/astral-sh/uv:python3.11-bookworm AS builder

# 设置工作目录
WORKDIR /app

# 安装编译和系统依赖
# 只有这个阶段需要这些大的 -dev 包
RUN apt-get update && apt-get install -y --no-install-recommends \
    # 音频处理依赖
    portaudio19-dev \
    libasound2-dev \
    # 编译依赖
    gcc \
    g++ \
    libc6-dev \
    # 其他工具
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 创建虚拟环境
RUN python3 -m venv /opt/venv
# 激活虚拟环境以便后续命令使用
ENV PATH="/opt/venv/bin:$PATH"

# 拷贝依赖文件并安装
# 这样做可以更好地利用Docker的层缓存
COPY pyproject.toml uv.lock ./
RUN uv sync --frozen

# ---- 第二阶段: Final ----
# 使用一个轻量的基础镜像
FROM ghcr.io/astral-sh/uv:python3.11-bookworm-slim AS final

WORKDIR /app

# 安装运行时的系统依赖 (注意：这里只安装运行时必要的包，而不是 -dev 包)
RUN apt-get update && apt-get install -y --no-install-recommends \
    # 运行时音频库
    libasound2 \
    libportaudio2 \
    # FFmpeg 运行时库
    ffmpeg \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswresample-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 从 builder 阶段拷贝已经安装好依赖的虚拟环境
COPY --from=builder /opt/venv /opt/venv

# 拷贝源代码
COPY . .

# 创建必要的目录
RUN mkdir -p tmp config models documents

# 设置环境变量，指向拷贝过来的虚拟环境
ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
ENV PYTHONPATH=/app

# 暴露端口
EXPOSE 5000

# 设置非 root 用户
RUN addgroup --gid 1001 --system appgroup && \
    adduser --uid 1001 --system --ingroup appgroup --no-create-home --shell /bin/false appuser && \
    chown -R appuser:appgroup /app

USER appuser

# 启动应用
CMD ["python", "main.py", "--config_path", "config/config.yaml"]
